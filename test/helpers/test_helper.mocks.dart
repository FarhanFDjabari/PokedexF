// Mocks generated by Mockito 5.3.2 from annotations
// in pokedex_f/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokedex_f/data/datasources/local/dao/pokemon_list_item_dao.dart'
    as _i9;
import 'package:pokedex_f/data/datasources/local/pokedex_local_datasource.dart'
    as _i11;
import 'package:pokedex_f/data/datasources/remote/api/api_services.dart'
    as _i10;
import 'package:pokedex_f/data/datasources/remote/pokedex_remote_datasource.dart'
    as _i12;
import 'package:pokedex_f/data/models/pokemon.dart' as _i4;
import 'package:pokedex_f/data/models/pokemon_list.dart' as _i3;
import 'package:pokedex_f/domain/entities/pokemon_entity.dart' as _i7;
import 'package:pokedex_f/domain/entities/pokemon_list_item_entity.dart' as _i8;
import 'package:pokedex_f/domain/repositories/pokedex_repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePokemonList_1 extends _i1.SmartFake implements _i3.PokemonList {
  _FakePokemonList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePokemon_2 extends _i1.SmartFake implements _i4.Pokemon {
  _FakePokemon_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PokedexRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokedexRepository extends _i1.Mock implements _i5.PokedexRepository {
  MockPokedexRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<String, _i3.PokemonList>> getAllPokemon(
    int? limit,
    int? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPokemon,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<String, _i3.PokemonList>>.value(
            _FakeEither_0<String, _i3.PokemonList>(
          this,
          Invocation.method(
            #getAllPokemon,
            [
              limit,
              offset,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<String, _i3.PokemonList>>);
  @override
  _i6.Future<_i2.Either<String, _i7.PokemonEntity>> getPokemonByName(
          String? pokemonName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPokemonByName,
          [pokemonName],
        ),
        returnValue: _i6.Future<_i2.Either<String, _i7.PokemonEntity>>.value(
            _FakeEither_0<String, _i7.PokemonEntity>(
          this,
          Invocation.method(
            #getPokemonByName,
            [pokemonName],
          ),
        )),
      ) as _i6.Future<_i2.Either<String, _i7.PokemonEntity>>);
  @override
  _i6.Stream<List<_i8.PokemonListItemEntity>> getCapturedPokemon() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCapturedPokemon,
          [],
        ),
        returnValue: _i6.Stream<List<_i8.PokemonListItemEntity>>.empty(),
      ) as _i6.Stream<List<_i8.PokemonListItemEntity>>);
  @override
  _i6.Future<
      _i2.Either<String, _i8.PokemonListItemEntity?>> getCapturedPokemonByName(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCapturedPokemonByName,
          [name],
        ),
        returnValue:
            _i6.Future<_i2.Either<String, _i8.PokemonListItemEntity?>>.value(
                _FakeEither_0<String, _i8.PokemonListItemEntity?>(
          this,
          Invocation.method(
            #getCapturedPokemonByName,
            [name],
          ),
        )),
      ) as _i6.Future<_i2.Either<String, _i8.PokemonListItemEntity?>>);
  @override
  _i6.Future<_i2.Either<String, String>> catchPokemon(
          _i8.PokemonListItemEntity? pokemon) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchPokemon,
          [pokemon],
        ),
        returnValue: _i6.Future<_i2.Either<String, String>>.value(
            _FakeEither_0<String, String>(
          this,
          Invocation.method(
            #catchPokemon,
            [pokemon],
          ),
        )),
      ) as _i6.Future<_i2.Either<String, String>>);
  @override
  _i6.Future<_i2.Either<String, String>> releasePokemon(
          _i8.PokemonListItemEntity? pokemon) =>
      (super.noSuchMethod(
        Invocation.method(
          #releasePokemon,
          [pokemon],
        ),
        returnValue: _i6.Future<_i2.Either<String, String>>.value(
            _FakeEither_0<String, String>(
          this,
          Invocation.method(
            #releasePokemon,
            [pokemon],
          ),
        )),
      ) as _i6.Future<_i2.Either<String, String>>);
}

/// A class which mocks [PokemonListItemDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonListItemDao extends _i1.Mock
    implements _i9.PokemonListItemDao {
  MockPokemonListItemDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i8.PokemonListItemEntity>> findAllPokemon() =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllPokemon,
          [],
        ),
        returnValue: _i6.Stream<List<_i8.PokemonListItemEntity>>.empty(),
      ) as _i6.Stream<List<_i8.PokemonListItemEntity>>);
  @override
  _i6.Future<_i8.PokemonListItemEntity?> findPokemonByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #findPokemonByName,
          [name],
        ),
        returnValue: _i6.Future<_i8.PokemonListItemEntity?>.value(),
      ) as _i6.Future<_i8.PokemonListItemEntity?>);
  @override
  _i6.Future<void> catchPokemon(_i8.PokemonListItemEntity? pokemon) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchPokemon,
          [pokemon],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> releasePokemon(_i8.PokemonListItemEntity? pokemon) =>
      (super.noSuchMethod(
        Invocation.method(
          #releasePokemon,
          [pokemon],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ApiServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiServices extends _i1.Mock implements _i10.ApiServices {
  MockApiServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.PokemonList> getAllPokemon({
    int? limit = 20,
    int? offset = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPokemon,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i6.Future<_i3.PokemonList>.value(_FakePokemonList_1(
          this,
          Invocation.method(
            #getAllPokemon,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i6.Future<_i3.PokemonList>);
  @override
  _i6.Future<_i4.Pokemon> getPokemonByName({required String? pokemonName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPokemonByName,
          [],
          {#pokemonName: pokemonName},
        ),
        returnValue: _i6.Future<_i4.Pokemon>.value(_FakePokemon_2(
          this,
          Invocation.method(
            #getPokemonByName,
            [],
            {#pokemonName: pokemonName},
          ),
        )),
      ) as _i6.Future<_i4.Pokemon>);
}

/// A class which mocks [PokedexLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokedexLocalDatasource extends _i1.Mock
    implements _i11.PokedexLocalDatasource {
  MockPokedexLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i8.PokemonListItemEntity>> getCaughtPokemon() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCaughtPokemon,
          [],
        ),
        returnValue: _i6.Stream<List<_i8.PokemonListItemEntity>>.empty(),
      ) as _i6.Stream<List<_i8.PokemonListItemEntity>>);
  @override
  _i6.Future<_i8.PokemonListItemEntity?> getCaughtPokemonByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCaughtPokemonByName,
          [name],
        ),
        returnValue: _i6.Future<_i8.PokemonListItemEntity?>.value(),
      ) as _i6.Future<_i8.PokemonListItemEntity?>);
  @override
  _i6.Future<void> catchPokemon(
          {required _i8.PokemonListItemEntity? pokemon}) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchPokemon,
          [],
          {#pokemon: pokemon},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> releasePokemon(
          {required _i8.PokemonListItemEntity? pokemon}) =>
      (super.noSuchMethod(
        Invocation.method(
          #releasePokemon,
          [],
          {#pokemon: pokemon},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [PokedexRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokedexRemoteDatasource extends _i1.Mock
    implements _i12.PokedexRemoteDatasource {
  MockPokedexRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.PokemonList> getAllPokemon({
    int? limit = 20,
    int? offset = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPokemon,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i6.Future<_i3.PokemonList>.value(_FakePokemonList_1(
          this,
          Invocation.method(
            #getAllPokemon,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i6.Future<_i3.PokemonList>);
  @override
  _i6.Future<_i4.Pokemon> getPokemonByName({required String? pokemonName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPokemonByName,
          [],
          {#pokemonName: pokemonName},
        ),
        returnValue: _i6.Future<_i4.Pokemon>.value(_FakePokemon_2(
          this,
          Invocation.method(
            #getPokemonByName,
            [],
            {#pokemonName: pokemonName},
          ),
        )),
      ) as _i6.Future<_i4.Pokemon>);
}
